#ifndef GRBL_STATE_H
#define GRBL_STATE_H

typedef enum {
    GRBL_STATE_UNKNOWN = -1,
    GRBL_STATE_INVALID = 0,
    GRBL_STATE_IDLE = 1,
    GRBL_STATE_RUN = 2,
    GRBL_STATE_HOLD_0 = 3,
    GRBL_STATE_HOLD_1 = 4,
    GRBL_STATE_JOG = 5,
    GRBL_STATE_ALARM = 6,
    GRBL_STATE_DOOR_0 = 7,
    GRBL_STATE_DOOR_1 = 8,
    GRBL_STATE_DOOR_2 = 9,
    GRBL_STATE_DOOR_3 = 10,
    GRBL_STATE_CHECK = 11,
    GRBL_STATE_HOME = 12,
    GRBL_STATE_SLEEP = 13,
} GrblState;

typedef enum GrblAlarm {
    GRBL_ALARM_UNKNOWN = -1,
    GRBL_ALARM_NONE = 0,
    GRBL_ALARM_HARD_LIMIT = 1,
    GRBL_ALARM_MOTION_EXCEEDS_MACHINE_TRAVEL = 2,
    GRBL_ALARM_RESET_WHILE_IN_MOTION = 3,
    GRBL_ALARM_PROBE_FAIL_INITIAL_STATE = 4,
    GRBL_ALARM_PROBE_FAIL_TRAVEL = 5,
    GRBL_ALARM_HOMING_FAIL_RESET = 6,
    GRBL_ALARM_HOMING_FAIL_DOOR = 7,
    GRBL_ALARM_HOMING_FAIL_LIMIT_CYCLE = 8,
    GRBL_ALARM_HOMING_FAIL_SWITCH_NOT_FOUND = 9,
    GRBL_ALARM_SPINDLE_CONTROL = 10,
    GRBL_ALARM_CONTROL_PIN = 11,
    GRBL_ALARM_AMBIGUOUS_SWITCH = 12,
    GRBL_ALARM_HARD_STOP = 13,
    GRBL_ALARM_UNHOMED = 14,
    GRBL_ALARM_INIT = 15,
} GrblAlarm;

typedef enum GrblError {
    GRBL_ERROR_INVALID_GCODE_WORD = 1,
    GRBL_ERROR_NUMERIC_VALUE_FORMAT = 2,
    GRBL_ERROR_UNRECOGNIZED_SYSTEM_COMMAND = 3,
    GRBL_ERROR_POSITIVE_VALUE_EXPECTED = 4,
    GRBL_ERROR_HOMING_CYCLE_NOT_ENABLED = 5,
    GRBL_ERROR_MINIMUM_STEP_PULSE_TIME = 6,
    GRBL_ERROR_EEPROM_READ_FAILED = 7,
    GRBL_ERROR_IDLE_REQUIRED = 8,
    GRBL_ERROR_GCODE_LOCKED_DURING_ALARM_OR_JOG = 9,
    GRBL_ERROR_SOFT_LIMIT_DISABLED_WITHOUT_HOMING = 10,
    GRBL_ERROR_MAX_CHARACTERS_PER_LINE_EXCEEDED = 11,
    GRBL_ERROR_MAXIMUM_STEP_RATE_EXCEEDED = 12,
    GRBL_ERROR_SAFETY_DOOR_OPENED_AND_DOOR_STATE_INITIATED = 13,
    GRBL_ERROR_BUILD_INFO_EXCEEDED_EEPROM_LINE_LENGTH_LIMIT = 14,
    GRBL_ERROR_JOG_TARGET_EXCEEDS_MACHINE_TRAVEL = 15,
    GRBL_ERROR_INVALID_JOG_COMMAND = 16,
    GRBL_ERROR_LASER_MODE_DISABLED = 17,
    GRBL_ERROR_INVALID_GCODE_COMMAND = 20,
    GRBL_ERROR_TOO_MANY_GCODE_COMMANDS_IN_BLOCK = 21,
    GRBL_ERROR_FEED_RATE_UNDEFINED = 22,
    GRBL_ERROR_INTEGER_VALUE_REQUIRED = 23,
    GRBL_ERROR_MULTIPLE_COMMAND_WITH_XYZ_WORDS_IN_BLOCK = 24,
    GRBL_ERROR_GCODE_WORD_REPEATED_IN_BLOCK = 25,
    GRBL_ERROR_GCODE_COMMAND_REQUIRES_XYZ_WORDS_IN_BLOCK = 26,
    GRBL_ERROR_LINE_NUMBER_VALUE_NOT_IN_RANGE = 27,
    GRBL_ERROR_MISSING_P_OR_L_VALUE_WORDS = 28,
    GRBL_ERROR_SIX_WORK_COORDINATE_SYSTEMS_SUPPORTED = 29,
    GRBL_ERROR_G53_REQUIRES_G0_OR_G1 = 30,
    GRBL_ERROR_UNUSED_AXIS_WORDS_IN_BLOCK = 31,
    GRBL_ERROR_G2_OR_G3_WITHOUT_XYZ_WORDS = 32,
    GRBL_ERROR_MOTION_COMMAND_INVALID_TARGET = 33,
    GRBL_ERROR_G2_OR_G3_COMPUTATION_FAILED = 34,
    GRBL_ERROR_G2_OR_G3_MISSING_IJK_OFFSET = 35,
    GRBL_ERROR_UNUSED_LEFTOVER_GCODE_WORDS = 36,
    GRBL_ERROR_DYNAMIC_TOOL_LENGTH_OFFSET_INVALID_AXIS = 37,
    GRBL_ERROR_TOOL_NUMBER_GREATER_THAN_MAX_VALUE = 38,
    GRBL_ERROR_P_PARAM_MAX_EXCEEDED = 39,
    GRBL_ERROR_CHECK_CONTROLS_PINS = 40,
    GRBL_ERROR_FAILED_TO_MOUNT_DEVICE = 60,
    GRBL_ERROR_READ_FAILED = 61,
    GRBL_ERROR_FAILED_TO_OPEN_DIRECTORY = 62,
    GRBL_ERROR_DIRECTORY_NOT_FOUND = 63,
    GRBL_ERROR_FILE_EMPTY = 64,
    GRBL_ERROR_FILE_NOT_FOUND = 65,
    GRBL_ERROR_FAILED_TO_OPEN_FILE = 66,
    GRBL_ERROR_DEVICE_IS_BUSY = 67,
    GRBL_ERROR_FAILED_TO_DELETE_DIRECTORY = 68,
    GRBL_ERROR_FAILED_TO_DELETE_FILE = 69,
    GRBL_ERROR_BLUETOOTH_FAILED_TO_START = 70,
    GRBL_ERROR_WIFI_FAILED_TO_START = 71,
    GRBL_ERROR_NUMBER_OUT_OF_RANGE_FOR_SETTING = 80,
    GRBL_ERROR_INVALID_VALUE_FOR_SETTING = 81,
    GRBL_ERROR_FAILED_TO_CREATE_FILE = 82,
    GRBL_ERROR_FAILED_TO_SEND_MESSAGE = 90,
    GRBL_ERROR_FAILED_TO_STORE_SETTING = 100,
    GRBL_ERROR_FAILED_TO_GET_SETTING_STATUS = 101,
    GRBL_ERROR_AUTHENTICATION_FAILED = 110,
    GRBL_ERROR_END_OF_LINE = 111,
    GRBL_ERROR_END_OF_FILE = 112,
    GRBL_ERROR_ANOTHER_INTERFACE_IS_BUSY = 120,
    GRBL_ERROR_JOG_CANCELLED = 130,
    GRBL_ERROR_BAD_PIN_SPECIFICATION = 150,
    GRBL_ERROR_INVALID_CONFIGURATION = 152,
    GRBL_ERROR_FILE_UPLOAD_FAILED = 160,
    GRBL_ERROR_FILE_DOWNLOAD_FAILED = 161,
} GrblError;

typedef enum GrblPinFlag {
    GRBL_PIN_FLAG_UNKNOWN = -1,
    GRBL_PIN_FLAG_X = 1 << 0,
    GRBL_PIN_FLAG_Y = 1 << 1,
    GRBL_PIN_FLAG_Z = 1 << 2,
    GRBL_PIN_FLAG_P = 1 << 3,
    GRBL_PIN_FLAG_D = 1 << 4,
    GRBL_PIN_FLAG_H = 1 << 5,
    GRBL_PIN_FLAG_R = 1 << 6,
    GRBL_PIN_FLAG_S = 1 << 7,
} GrblPinFlag;

typedef enum GrblAccessoryFlag {
    GRBL_ACCESSORY_FLAG_UNKNOWN = -1,
    GRBL_ACCESSORY_FLAG_SPINDLE_CW = 1 << 0,
    GRBL_ACCESSORY_FLAG_SPINDLE_CCW = 1 << 1,
    GRBL_ACCESSORY_FLAG_FLOOD_COOLANT = 1 << 2,
    GRBL_ACCESSORY_FLAG_MIST_COOLANT = 1 << 3,
} GrblAccessoryFlag;

typedef struct {
    bool is_set;
    float x;
    float y;
    float z;
} GrblCoord;

typedef struct {
    bool is_set;
    int planned_buffer_available_blocks;
    int rx_buffer_available_bytes;
} GrblBufferState;

typedef struct {
    bool is_set;
    int rate;
    int spindle_speed;
} GrblFeedState;

GrblState grbl_state_from_string(char *state);
const char *grbl_state_to_string(GrblState state);
const char *grbl_alarm_to_string(GrblAlarm alarm);
const char *grbl_error_to_string(GrblError error);

#endif
